input {
	redis {
		host => "192.168.1.182"
		type => "redis-input"
		data_type => "list"
		key => "logstash"
	}
}
output {
	stdout { }
	elasticsearch {
	cluster => "elasticsearch"
	}
}

#This logstash parser is made specifically for Bro 2.3
#Parser made by Jason Smith and edited by Chris Rimondi


#Logs being parsed:
#app_stats.log
#conn.log
#dns.log
#dpd.log
#files.log
#http.log
#notice.log
#software.log
#dhcp.log
#known_certs.log
#known_hosts.log
#known_services.log
#ssh.log
#ssl.log
#weird.log

input {

#Production Logs#############################
  file {
    type => "BRO_httplog"
    path => "/nsm/bro/logs/current/http.log"
  }
  file {
    type => "BRO_known_certslog"
    path => "/nsm/bro/logs/current/known_certs.log"
  }
  file {
    type => "BRO_noticelog"
    path => "/nsm/bro/logs/current/notice.log"
  }
  file {
    type => "BRO_known_hostslog"
    path => "/nsm/bro/logs/current/known_hosts.log"
  }
  file {
    type => "BRO_known_serviceslog"
    path => "/nsm/bro/logs/current/known_services.log"
  }
  file {
    type => "BRO_sshlog"
    path => "/nsm/bro/logs/current/ssh.log"
  }
  file {
    type => "BRO_dpdlog"
    path => "/nsm/bro/logs/current/dpd.log"
  }
  file {
    type => "BRO_connlog"
    path => "/nsm/bro/logs/current/conn.log"
  }
  file {
    type => "BRO_weirdlog"
    path => "/nsm/bro/logs/current/weird.log"
  }
  file {
    type => "BRO_app_statslog"
    path => "/nsm/bro/logs/current/appstats.log"
  }
  file {
    type => "BRO_dhcplog"
    path => "/nsm/bro/logs/current/dhcp.log"
  }
  file {
    type => "BRO_ftplog"
    path => "/nsm/bro/logs/current/ftp.log"
  }
  file {
    type => "BRO_irclog"
    path => "/nsm/bro/logs/current/irc.log"
  }
  file {
    type => "BRO_snmplog"
    path => "/nsm/bro/logs/current/snmp.log"
  }
  file {
    type => "BRO_smtplog"
    path => "/nsm/bro/logs/current/smtp.log"
  }
  file {
    type => "BRO_tunnellog"
    path => "/nsm/bro/logs/current/tunnel.log"
  }
  file {
    type => "BRO_x509log"
    path => "/nsm/bro/logs/current/x509.log"
  }
  file {
    type => "BRO_fileslog"
    path => "/nsm/bro/logs/current/files.log"
  }
  file {
    type => "BRO_ssllog"
    path => "/nsm/bro/logs/current/ssl.log"
  }
  file {
    type => "BRO_noticelog"
    path => "/nsm/bro/logs/current/notice.log"
  }
  file {
    type => "BRO_softwarelog"
    path => "/nsm/bro/logs/current/software.log"
  }
  file {
    type => "BRO_dnslog"
    path => "/nsm/bro/logs/current/dns.log"
  }
###################################################
}

filter {
  if [message] =~ /^#/ {
    drop {  }
  } else {

# BRO_app_statslog ######################
  if [type] == "BRO_app_statslog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<ts_delta>(.*?))\t(?<app>(.*?))\t(?<uniq_hosts>(.*?))\t(?<hits>(.*?))\t(?<bytes>(.*))" ]
    }
  }
# BRO_connlog ######################
  if [type] == "BRO_connlog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<service>(.*?))\t(?<duration>(.*?))\t(?<orig_bytes>(.*?))\t(?<resp_bytes>(.*?))\t(?<conn_state>(.*?))\t(?<local_orig>(.*?))\t(?<missed_bytes>(.*?))\t(?<history>(.*?))\t(?<orig_pkts>(.*?))\t(?<orig_ip_bytes>(.*?))\t(?<resp_pkts>(.*?))\t(?<resp_ip_bytes>(.*?))\t(?<tunnel_parents>(.*?))" ]
    }
    geoip {
    source => "resp_h"
    target => "geoip"
    database =>"/opt/logstash/vendor/geoip/GeoLiteCity.dat"
    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }

  mutate {
    convert => [ "[geoip][coordinates]", "float" ]
  } 
  }
# BRO_noticelog ######################
  if [type] == "BRO_noticelog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<fuid>(.*?))\t(?<file_mime_type>(.*?))\t(?<file_desc>(.*?))\t(?<proto>(.*?))\t(?<note>(.*?))\t(?<msg>(.*?))\t(?<sub>(.*?))\t(?<src>(.*?))\t(?<dst>(.*?))\t(?<p>(.*?))\t(?<n>(.*?))\t(?<peer_descr>(.*?))\t(?<actions>(.*?))\t(?<suppress_for>(.*?))\t(?<dropped>(.*?))\t(?<remote_location.country_code>(.*?))\t(?<remote_location.region>(.*?))\t(?<remote_location.city>(.*?))\t(?<remote_location.latitude>(.*?))\t(?<remote_location.longitude>(.*))" ]
    }
  }

# BRO_dhcplog ######################
  if [type] == "BRO_dhcplog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<mac>(.*?))\t(?<assigned_ip>(.*?))\t(?<lease_time>(.*?))\t(?<trans_id>(.*))" ]
    }
  }

# BRO_dnslog ######################
  if [type] == "BRO_dnslog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<trans_id>(.*?))\t(?<query>(.*?))\t(?<qclass>(.*?))\t(?<qclass_name>(.*?))\t(?<qtype>(.*?))\t(?<qtype_name>(.*?))\t(?<rcode>(.*?))\t(?<rcode_name>(.*?))\t(?<AA>(.*?))\t(?<TC>(.*?))\t(?<RD>(.*?))\t(?<RA>(.*?))\t(?<Z>(.*?))\t(?<answers>(.*?))\t(?<TTLs>(.*?))\t(?<rejected>(.*))" ]
    }
  }

# BRO_softwarelog ######################
  if [type] == "BRO_softwarelog" {
    grok {
      match => [ "message", "(?<ts>(.*?))\t(?<host>(.*?))\t(?<host_p>(.*?))\t(?<software_type>(.*?))\t(?<name>(.*?))\t(?<version.major>(.*?))\t(?<version.minor>(.*?))\t(?<version.minor2>(.*?))\t(?<version.minor3>(.*?))\t(?<version.addl>(.*?))\t(?<unparsed_version>(.*))" ]
    }
  }

# BRO_dpdlog ######################
  if [type] == "BRO_dpdlog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<proto>(.*?))\t(?<analyzer>(.*?))\t(?<failure_reason>(.*))" ]
    }
  }

# BRO_fileslog ######################
  if [type] == "BRO_fileslog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<fuid>(.*?))\t(?<tx_hosts>(.*?))\t(?<rx_hosts>(.*?))\t(?<conn_uids>(.*?))\t(?<source>(.*?))\t(?<depth>(.*?))\t(?<analyzers>(.*?))\t(?<mime_type>(.*?))\t(?<filename>(.*?))\t(?<duration>(.*?))\t(?<local_orig>(.*?))\t(?<is_orig>(.*?))\t(?<seen_bytes>(.*?))\t(?<total_bytes>(.*?))\t(?<missing_bytes>(.*?))\t(?<overflow_bytes>(.*?))\t(?<timedout>(.*?))\t(?<parent_fuid>(.*?))\t(?<md5>(.*?))\t(?<sha1>(.*?))\t(?<sha256>(.*?))\t(?<extracted>(.*))" ]
    }
  }

# BRO_httplog ######################
  if [type] == "BRO_httplog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<filename>(.*?))\t(?<tags>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<orig_fuids>(.*?))\t(?<orig_mime_types>(.*?))\t(?<resp_fuids>(.*?))\t(?<resp_mime_types>(.*))" ]
    }
  }

# BRO_known_certslog ######################
  if [type] == "BRO_known_certslog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<host>(.*?))\t(?<port_num>(.*?))\t(?<subject>(.*?))\t(?<issuer_subject>(.*?))\t(?<serial>(.*))" ]
    }
  }

# BRO_known_hostslog ######################
  if [type] == "BRO_known_hostslog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<host>(.*))" ]
    }
  }

# BRO_known_serviceslog ######################
  if [type] == "BRO_known_serviceslog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<host>(.*?))\t(?<port_num>(.*?))\t(?<port_proto>(.*?))\t(?<service>(.*))" ]
    }
  }

# BRO_sshlog ######################
  if [type] == "BRO_sshlog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<status>(.*?))\t(?<direction>(.*?))\t(?<client>(.*?))\t(?<server>(.*?))\t(?<remote_location.country_code>(.*?))\t(?<remote_location.region>(.*?))\t(?<remote_location.city>(.*?))\t(?<remote_location.latitude>(.*?))\t(?<remote_location.longitude>(.*))" ]
    }
  }

# BRO_ftplog ######################
  if [type] == "BRO_ftplog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<user>(.*?))\t(?<password>(.*?))\t(?<command>(.*?))\t(?<arg>(.*?))\t(?<mime_type>(.*?))\t(?<file_size>(.*?))\t(?<reply_code>(.*?))\t(?<reply_msg>(.*?))\t(?<data_channel.passive>(.*?))\t(?<data_channel.orig_h>(.*?))\t(?<data_channel.resp_h>(.*?))\t(?<data_channel.resp_p>(.*?))\t(?<fuid>(.*))" ]
    }
  }

# BRO_irclog ######################
  if [type] == "BRO_irclog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<nick>(.*?))\t(?<user>(.*?))\t(?<command>(.*?))\t(?<value>(.*?))\t(?<addl>(.*?))\t(?<dcc_file_name>(.*?))\t(?<dcc_file_size>(.*?))\t(?<dcc_mime_type>(.*?))\t(?<fuid>(.*))" ]
    }
  }

# BRO_smtplog ######################
  if [type] == "BRO_smtplog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<trans_depth>(.*?))\t(?<helo>(.*?))\t(?<mailfrom>(.*?))\t(?<rcptto>(.*?))\t(?<date>(.*?))\t(?<from>(.*?))\t(?<to>(.*?))\t(?<reply_to>(.*?))\t(?<msg_id>(.*?))\t(?<in_reply_to>(.*?))\t(?<subject>(.*?))\t(?<x_originating_ip>(.*?))\t(?<first_received>(.*?))\t(?<second_received>(.*?))\t(?<last_reply>(.*?))\t(?<path>(.*?))\t(?<user_agent>(.*?))\t(?<tls>(.*?))\t(?<fuids>(.*?))\t(?<is_webmail>(.*))" ]
    }
  }

# BRO_snmplog ######################
  if [type] == "BRO_snmplog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<duration>(.*?))\t(?<version>(.*?))\t(?<community>(.*?))\t(?<get_requests>(.*?))\t(?<get_bulk_requests>(.*?))\t(?<get_responses>(.*?))\t(?<set_requests>(.*?))\t(?<display_string>(.*?))\t(?<up_since>(.*))" ]
    }
  }

# BRO_tunnellog ######################
  if [type] == "BRO_tunnellog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<tunnel_type>(.*?))\t(?<action>(.*))" ]
    }
  }

# BRO_x509log ######################
  if [type] == "BRO_x509log" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<id>(.*?))\t(?<certificate.version>(.*?))\t(?<certificate.serial>(.*?))\t(?<certificate.subject>(.*?))\t(?<certificate.issuer>(.*?))\t(?<certificate.not_valid_before>(.*?))\t(?<certificate.not_valid_after>(.*?))\t(?<certificate.key_alg>(.*?))\t(?<certificate.sig_alg>(.*?))\t(?<certificate.key_type>(.*?))\t(?<certificate.key_length>(.*?))\t(?<certificate.exponent>(.*?))\t(?<certificate.curve>(.*?))\t(?<san.dns>(.*?))\t(?<san.uri>(.*?))\t(?<san.email>(.*?))\t(?<san.ip>(.*?))\t(?<basic_constraints.ca>(.*?))\t(?<basic_constraints.path_len>(.*))" ]
    }
  }

# BRO_ssllog ######################
  if [type] == "BRO_ssllog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<version>(.*?))\t(?<cipher>(.*?))\t(?<curve>(.*?))\t(?<server_name>(.*?))\t(?<session_id>(.*?))\t(?<last_alert>(.*?))\t(?<established>(.*?))\t(?<cert_chain_fuids>(.*?))\t(?<client_cert_chain_fuids>(.*?))\t(?<subject>(.*?))\t(?<issuer>(.*?))\t(?<client_subject>(.*?))\t(?<client_issuer>(.*?))\t(?<validation_status>(.*))" ]
    }
  }

# BRO_weirdlog ######################
  if [type] == "BRO_weirdlog" {
    grok {
match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<name>(.*?))\t(?<addl>(.*?))\t(?<notice>(.*?))\t(?<peer>(.*))" ]
    }
  }
 }
}
output {
  if [type] == "BRO_dnslog" {
    statsd {
    increment => "dnslog.qtype_name.%{qtype_name}"
    increment => "dnslog.query.%{query}"
    increment => "dnslog.id_orig_h.%{id.orig_h}"
    increment => "dnslog.proto.%{proto}"
    }
  }
   if [type] == "BRO_connlog" {
    statsd {
    increment => "connlog.protocol.%{proto}"
    increment => "connlog.service.%{service}"
    count => [ "connlog.orig_bytes", "%{orig_bytes}" ]
    count => [ "connlog.resp_bytes", "%{resp_bytes}" ]
    timing => [ "connlog.duration", "%{duration}" ]
    }
  }
    if [type] == "BRO_softwarelog" {
    statsd {
    increment => "softwarelog.software_type.%{software_type}"
    increment => "softwarelog.name.%{name}"
    }
  }
  if [type] == "BRO_fileslog" {
    statsd {
    increment => "fileslog.mime_type.%{mime_type}"
    increment => "fileslog.name.%{filename}"
    }
  }
  if [type] == "BRO_httplog" {
    statsd {
    increment => "httplog.user_agent.%{user_agent}"
    increment => "httplog.host.%{host}"
    }
  }
  if [type] == "BRO_sshlog" {
    statsd {
    increment => "sshlog.client.%{client}"
    increment => "sshlog.server.%{server}"
    }
  }
  if [type] == "BRO_ftplog" {
    statsd {
    increment => "ftplog.uid.%{uid}"
    increment => "ftplog.mime_type.%{mime_type}"
    increment => "ftplog.reply_code.%{reply_code}"
    count => [ "ftplog.file_size", "%{file_size}" ]
    }
  }
    if [type] == "BRO_irclog" {
    statsd {
    increment => "irclog.mime_type.%{dcc_mime_type}"
    }
  }
    if [type] == "BRO_smtplog" {
    statsd {
    increment => "smtplog.mailfrom.%{mailfrom}"
    increment => "smtplog.rcptto.%{rcptto}"
    increment => "smtplog.from.%{from}"
    increment => "smtplog.to.%{to}"
    increment => "smtplog.user_agent.%{useragent}"
    increment => "smtplog.is_webmail.%{is_webmail}"
    }
  }
}
